// Copyright (c) 2004 Broad Institute of MIT and Harvard
//
// SampleKmerStats.cc


// Purpose:
//    Given a list of kmers occurring in a fastb file (contigs), compute
//    the frequencies of occurrence of these kmers, and report the
//    percentage of these kmers that occur exactly once (aka unique kmers).
//
//    If the CONTIGS_FASTAMB_FILE of ambiguous base bits is given,
//    the kmers which contain ambiguous bases are discarded from the
//    computation.
//
//    Run this program for various k and collect the statistics to plot
//    the percentage of unique kmers in various genomes as k runs in the
//    range of [12, 43].
//
//    This was originally meant to find the "right" value of k to be used
//    for SAGE-reads (cf. Agencourt).  But as the results were gathered,
//    this project took on an interest of its own.  In particular, it was
//    noted that most mammalian genomes have (only) about 90% of kmers
//    being unique for large values of k (in [30,43]).  It is not clear
//    why this is the case.


// Command line options:
//    CONTIGS_FASTB_FILE   : the input fastb file
//    CONTIGS_FASTAMB_FILE : the optional input fastamb file
//
//    LOCATIONS_FILE       : the input locations file
//                           (in text form:  contig_number  offset_bases)
//
//    KMER_SIZE          : the k-value (limited to [2,46] for now)
//
//    BASES_TO_HASH      : if N is the value, a hash table of size 4^N will
//                         be used; the larger it is, the more efficient is
//                         the code, but the more memory it will use
//                         (default = 12; this seems to work pretty well)
//    IS_HUMAN           : if this is True, only contigs #1 to #24 will be
//                         sampled; this is because of the way the human
//                         genome is stored.
//                         (default = False)
//

// Input files:
//    CONTIGS_FASTB_FILE
//    CONTIGS_FASTAMB_FILE (optional)
//    LOCATIONS_FILE


// Output files:
//    none


#include "Bitvector.h"
#include "Basevector.h"
#include "kmer_freq/KmerSampler.h"


//------------------------------------------------------------
// auxiliary routines
//


inline double percentage(longlong c, longlong N)
{
  // returns the percentage of c many things among N many things

  return double(c*100) / double(N);
}



//------------------------------------------------------------
// main()
//

int main( int argc, char *argv[] )
{
  //------------------------------------------------------------
  // Initialzation
  //

  RunTime();

  BeginCommandArguments;
  CommandArgument_String( CONTIGS_FASTB_FILE );
  CommandArgument_String_OrDefault( CONTIGS_FASTAMB_FILE, "" );

  CommandArgument_String( LOCATIONS_FILE );
  CommandArgument_UnsignedInt( KMER_SIZE );
  CommandArgument_UnsignedInt_OrDefault( BASES_TO_HASH, 12 );

  CommandArgument_Bool_OrDefault( IS_HUMAN, False );

  EndCommandArguments;

  // NB: if IS_HUMAN is set True, then only contigs #1 - #24 will be used;
  // this is just a peculiarity with the way the human genome data is stored
  // here at Broad.

  const int kmer_size = int(KMER_SIZE);
  const int bases_to_hash = int(BASES_TO_HASH);

  const Bool use_fastamb_file = ( CONTIGS_FASTAMB_FILE != "" );

  // Verify that the parameters are within limits

  if (kmer_size <= 1)
    {
      cout << "The value " << KMER_SIZE << " of KMER_SIZE"
	   << " is too small; the minimum allowed is 2." << endl;
      exit(-1);
    }

  if (bases_to_hash > 15)
    {
      cout << "The value " << BASES_TO_HASH << " of BASES_TO_HASH"
	   << " is too big; the maximum allowed is 15." << endl;
      exit(-1);
    }

  if ( kmer_size - bases_to_hash > 31 )
    {
      cout << "The value " << KMER_SIZE - BASES_TO_HASH
	   << " of KMER_SIZE - BASES_TO_HASH is too big;"
	   << " the maximum allowed is 31." << endl;
      exit(-1);
    }


  // Read in the contigs
  cout << Date() << ": reading contigs..." << endl;
  vecbasevector basevectors;
  basevectors.ReadAll( CONTIGS_FASTB_FILE );
  const int num_contigs = basevectors.size();
  cout << Date() << ": reading contigs...done." << endl;


  vecbitvector ambiguousbitvectors;
  if ( use_fastamb_file )
    {
      // Read in the ambiguous bits
      cout << Date() << ": reading ambiguous bits..." << endl;
      ambiguousbitvectors.ReadAll( CONTIGS_FASTAMB_FILE );
      ForceAssertEq( ambiguousbitvectors.size(), basevectors.size() )
	cout << Date() << ": reading ambiguous bits...done." << endl;
    }


  // Read in the locations file
  cout << Date() << ": reading in locations file..." << endl;
  vec< SampleLocation > sample_locations;
  Ifstream( locations_stream, LOCATIONS_FILE );
  int contig, offset;
  locations_stream >> contig;
  locations_stream >> offset;
  while (locations_stream)
    {
      const SampleLocation location(contig, offset);
      sample_locations.push_back(location);
      locations_stream >> contig;
      locations_stream >> offset;
    }
  locations_stream.close();
  cout << Date() << ": reading in locations file...done." << endl;
  cout << sample_locations.size() << " many locations" << endl;


  // Instantiate a KmerSampler
  cout << Date() << ": initializing counters..." << endl;
  KmerSampler kmer_sampler( kmer_size, bases_to_hash );
  cout << Date() << ": initializing counters...done." << endl;

  
  // Register kmers to be sampled
  cout << Date() << ": registering kmers to be sampled..." << endl;
  longlong num_kmers_accepted = 0;
  if ( use_fastamb_file )
    {
      num_kmers_accepted = kmer_sampler.RegisterKmers(basevectors,
						      ambiguousbitvectors,
						      sample_locations);
    }
  else
    {
      num_kmers_accepted = kmer_sampler.RegisterKmers(basevectors,
						      sample_locations);
    }
  cout << Date() << ": registering kmers to be sampled...done." << endl;
  cout << num_kmers_accepted << " many kmers registered to be sampled" << endl;


  // Parse each contig for kmer statistics
  
  int contig_start = 0;
  int contig_end = num_contigs;

  if ( IS_HUMAN )
    {
      // for the human genome,
      // use only contigs #1 thru #24 inclusive

      ForceAssertGe( num_contigs, 24 );
      contig_start = 1;
      contig_end = 25;
    }

  cout << Date() << ": parsing " << contig_end - contig_start
       << " contigs..." << endl;

  int dotter = 1000;
  while (dotter < num_contigs)
    {
      dotter *= 10;
    }
  dotter /= 1000;
  cout << "one dot per " << dotter << " contigs:" << endl;

  if (use_fastamb_file)
    {
      for (int i = contig_start; i < contig_end; i++)
	{
	  if ( i % dotter == dotter-1 )
	    Dot( cout, i / dotter );

	  kmer_sampler.ParseContig( basevectors[i],
				    ambiguousbitvectors[i] );
	}
    }
  else
    {
      for (int i = contig_start; i < contig_end; i++)
	{
	  if ( i % dotter == dotter-1 )
	    Dot( cout, i / dotter );

	  kmer_sampler.ParseContig( basevectors[i] );
	}
    }

  cout << endl
       << Date() << ": parsing " << contig_end - contig_start
       << " contigs...done." << endl;


  // Output the statistics collected

  cout << Date() << ": computing statistics..." << endl;

  longlong num_kmers_parsed, num_unique_kmers;
  kmer_sampler.ComputeStatistics(num_kmers_parsed, num_unique_kmers);

  cout << Date() << ": computing statistics...done." << endl;

  cout.setf(ios::internal);
  cout.setf(ios::fixed);
  cout << num_kmers_parsed << " kmers (k = " << kmer_size << ") parsed" << endl;

  cout << num_unique_kmers << " (" 
       << setprecision(3) << percentage(num_unique_kmers,num_kmers_accepted)
       << "%) kmers out of "
       << num_kmers_accepted
       << " sampled kmers occurred exactly once." << endl;

} // main()

