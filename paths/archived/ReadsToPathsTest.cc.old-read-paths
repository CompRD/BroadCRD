// Copyright (c) 2004 Broad Institute/Massachusetts Institute of Technology

// ReadsToPathsTest.  Test code to determine if ReadsToPaths seems to be doing
// approximately the right thing.  The output has to be manually interpreted.

#ifndef FORCE_DEBUG
    #define NDEBUG
#endif

#include "Alignment.h"
#include "AlignTwoBasevectors.h"
#include "Basevector.h"
#include "CoreTools.h"
#include "Feudal.h"
#include "FeudalMimic.h"
#include "math/Functions.h"
#include "paths/KmerPath.h"

int main( int argc, char *argv[] )
{
     RunTime( );

     BeginCommandArguments;
     CommandArgument_String(PRE);
     CommandArgument_String(DATA);
     CommandArgument_String(RUN);
     CommandArgument_UnsignedInt_OrDefault(K, 96);
     EndCommandArguments;

     String predata = PRE + "/" + DATA;
     String run_dir = PRE + "/" + DATA + "/" + RUN;
  
     vecbasevector EE( run_dir + "/reads.fastb" );
     int N = EE.size( );
     vecreadpath paths( run_dir + "/reads.paths" );
     vecreadpath paths_rc( run_dir + "/reads.paths_rc" );

     // Build read paths for the reads themselves.

     vec< vec<int> > overlaps(N);
     for ( int i1 = 0; i1 < N; i1++ )
     {    for ( int i2 = 0; i2 < N; i2++ )
          {    if ( i1 == i2 ) continue;
               if ( ProperOverlap( paths[i1], paths_rc[i2] ) )
               {    overlaps[i1].push_back(i2);    }    }    }

     vec< vec<int> > known(N);
     READ( run_dir + "/aligns.total2", vec<alignment_plus>, all_aligns );
     for ( unsigned int i = 0; i < all_aligns.size( ); i++ )
     {    alignment_plus& ap = all_aligns[i];
          int id1 = ap.Id1( ), id2 = ap.Id2( );
          if ( !ap.Rc2( ) ) continue;
          static basevector rd2;
          rd2 = EE[id2];
          rd2.ReverseComplement( );
          int errors = ActualErrors( EE[id1], rd2, ap.a );
          if ( errors == 0 && ap.a.Pos1( ) - ap.a.pos1( ) >= (int) K )
          {    known[id1].push_back(id2);    }     }

     for ( int i = 0; i < N; i++ )
     {    Sort( overlaps[i] );
          Sort( known[i] );
          for ( int j = 0; j < overlaps[i].isize( ); j++ )
          {    if ( !BinMember( known[i], overlaps[i][j] ) )
               {    int id1 = i, id2 = overlaps[i][j];
                    static align a;
                    int RC;
                    static basevector rd2;
                    rd2 = EE[id2];
                    rd2.ReverseComplement( );
                    int over = AlignTwoBasevectors( EE[id1], rd2, a, 0, 1000000,
                         0.0, 0, RC, 8 );
                    int errors = ActualErrors( EE[id1], rd2, a );
                    if ( over >= (int) K && errors == 0 
                         && ( a.pos1( ) == 0 || a.pos2( ) == 0 )
                         && ( a.Pos1( ) == (int) EE[id1].Length( )
                              || a.Pos2( ) == (int) EE[id2].Length( ) ) )
                    {    continue;    }
                    cout << "found new overlap: " << id1 << " " << id2
                         << "\n";    }    }
          for ( int j = 0; j < known[i].isize( ); j++ )
          {    if ( !BinMember( overlaps[i], known[i][j] ) )
               {    cout << "missing overlap: " << i << " "
                         << known[i][j] << "\n";    }    }    }

     EXIT_MAIN_NORMALLY;    }
