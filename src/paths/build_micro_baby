#!/bin/csh -f

# usage: build_micro_baby region range
#
#
# WARNING: This script gets data out of the BAM files incorrectly.
#
# The BAM files used in this script are conglomerated from several libraries and
# do not clearly state the libraries' separations and standard deviations.
# This script uses hard-wired values (input in samtools view) for SEP and DEV.
# These values are appropriate for the fragment reads, as the source libraries
# have roughly equal separations, but for the jumping reads the values are
# averages of a very disparate data set.
#
# We need to parse the BAM files properly to solve this problem.  An ideal
# solution would be to create a routine - either in a separate module or as part
# of Sam2CRDDump - which parses a BAM file's header and body and creates a
# PairsManager object.


# THIS WIPES OUT THE DIRECTORY AND REBUILDS IT.

echo "`date`: Running build_micro_baby $1 $2 $3 $4"

# Check that the user isn't running an old command-line.
if ( $1 == "1" || $1 == "2" ) then
    echo "ERROR: build_micro_baby no longer uses the bam-version argument (1 or 2).  Please remove this from your command line."
    exit
endif

# First argument: the name of the REGION directory.  The data from this run
# will go into O.garnettii/babies/<region>.
set region = $1

# Second argument: the range of the Bushbaby reference genome to grab.
# E.g. 0:1000-5000, standing for this range of bases on super_0. 
set range = $2

# Third and fourth arguments: optional - they are passed to RunAllPathsLG
set extra1 = $3
set extra2 = $4
# define the bushbaby directory, and create the region inside it

# REF:  O.garnettii/babies/$region
# DATA: data
# RUN:  run

set baby = /wga/scr1/ALLPATHS/O.garnettii/babies
set ref = $baby/$region
set data = $ref/data
set run = $data/run
echo "RUN = $run"

/bin/rm -rf $ref
mkdir $ref
mkdir $data
echo $range > $ref/region

# create mini-genome in its own reference dir
set req_scontigs = `echo $range | grep \:` #check if region consists of list of supers

if ( $req_scontigs != "" ) then
    set tig = `echo $range | tr ':' ' ' | Col 1`
    set start = `echo $range | tr ':' ' ' | tr '-' ' ' | Col 2`
    set stop = `echo $range | tr ':' ' ' | tr '-' ' ' | Col 3`
    echo "`date`: Creating the mini-genome from single super..."
    SelectBases PRE=/ INPUT=$baby/../genome.fasta CONTIG=$tig START=$start STOP=$stop \
	OUTPUT=$ref/genome.fasta
    set super_range = super_$range
    echo "super_range" $super_range
else
    echo "`date`: Creating the mini-genome form list of supers..."
    SelectFasta PRE=/ INPUT=$baby/../genome.fasta IDS="{"$range"}" OUTPUT=$ref/genome.fasta
    set super_range = `echo ","$range | sed -e 's/\,/ super_/g'`
    echo "super_range" $super_range
endif


( cd $ref; MakeLookupTable SOURCE=genome.fasta OUT_HEAD=genome LOOKUP_ONLY=True )
MakeLookupTable SOURCE=$ref/genome.fasta OUT_HEAD=$ref/genome
cp $ref/genome.fastamb $data
FastbSizes FILE=$ref/genome.fastb TOTAL_ONLY=True REPORT=$ref/genome.size
GenomeUnipathStats GENOME=$ref/genome K=96 DOT=$ref/genome.dot

# copy ploidy file to data dir
cp $baby/../ploidy $data

# Set up the sets of lanes to extract data from.
echo "`date`: Extracting data for this region..."

set FRAG_LANES="{ {30KMCAAXX,30KMWAAXX,30LWUAAXX,429HDAAXX}.{1,2,3,4,5,6,7,8} , 30R3PAAXX.{1,2,3,4,5,6} , 30TYFAAXX.{6,7,8} , 30U38AAXX.1 , 30V0JAAXX.{5,6,7,8} , 30W5CAAXX.{1,2,3,5,6,7,8} }"
set SHEARED_JUMP_LANES="{ 4330NAAXX.{1,7,8} , {4326WAAXX,429CWAAXX}.{1,2,3,4,5,6,7,8}, 600NVAAXX.{1,2,3,5,6} }"
set ECOP15I_JUMP_LANES="{ 42EWKAAXX.{1,2,3,5,6,7,8} , 42EYCAAXX.{6,7,8} , 43271AAXX.{1,3,6,7,8} }"
set JUMP_LANES = "{ $SHEARED_JUMP_LANES , $ECOP15I_JUMP_LANES }"
set FOSMID_JUMP_LANES="{ 42KH9AAXX.1, 61AL2AAXX.1 }"

# Use ExtractFromBAM and build assembly input files.
ExtractFromBAM.pl TARGET_HEAD=$data/frag_reads_orig RANGE="$super_range" LANES=\""$FRAG_LANES"\" NOMINAL_READ_LEN=101
ExtractFromBAM.pl TARGET_HEAD=$data/jump_reads_extract RANGE="$super_range" LANES=\""$JUMP_LANES"\" 
ExtractFromBAM.pl TARGET_HEAD=$data/long_jump_reads_extract RANGE="$super_range" LANES=\""$FOSMID_JUMP_LANES"\" 

# Check that all the data was generated properly.
if ( ! -e $data/frag_reads_orig.fastb || ! -e $data/jump_reads_extract.fastb || ! -e $data/long_jump_reads_extract.fastb ) then
    echo "ERROR: Output was not properly generated by ExtractFromBAM.  Exiting."
    exit
endif


# Reverse jumps
ReverseFastb READS_IN=$data/jump_reads_extract READS_OUT=$data/jump_reads_orig QUALS=True PAIRED=True
cp $data/jump_reads_extract.pairs $data/jump_reads_orig.pairs

# Trim fosmids
TrimReads HEAD_IN=$data/long_jump_reads_extract HEAD_OUT=$data/long_jump_reads_orig TRIM_START=1 TRIM_SIZE=26 UPDATE_PAIR_SEPS=False
cp $data/long_jump_reads_extract.pairs $data/long_jump_reads_orig.pairs

# Run!
RunAllPathsLG \
    ALLPATHS_BASE=projects/ALLPATHS REFERENCE_NAME=O.garnettii/babies/$region \
    DATA_SUBDIR=data RUN=run OVERWRITE=True \
    TARGETS=full_eval EVALUATION=FULL USE_LONG_JUMPS=True $extra1 $extra2


# align the unibases to the mini-reference

( cd $run; QueryLookupTable K=12 MM=12 MC=0.15 SEQS=all_reads.unibases.k96 SEQS_IS_FASTB=True L=../../genome.lookup VISUAL=True )

echo ""
HyperToReftigs PRE=/ DATA=$data RUN=run K=96 READS=all_reads ORIGIN=$start

echo ""
echo "`date`: done"
