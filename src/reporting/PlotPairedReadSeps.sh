#!/bin/sh
# Generate histogram plots of sampled separation data generated by 
# SamplePairedReadStats.  sample_seps files contain lines of the form "lib sep"
# for each sample taken.  Generates a png for innie/outie distribution of each.
# --Bruce  25 Oct 2010

innies=$1.sample_seps.in
outies=$1.sample_seps.out

if [ ! -f $innies ]; then
    echo usage: PlotPairedReadSeps reads
    echo '      (reads.sample_seps.in must exist)'
    echo '      (reads.sample_seps.out will also be plotted if it exists)'
    exit 1
fi

if [ -f $outies ]; then
    outcmd="plotkind('$1', 'out')"
fi

R --no-save <<EOF

plotseps<-function(lib, seps, kind, title) {
  if (kind == 'in') {
    minsep<-max(-200,mean(seps)-5*sd(seps),min(seps))
    maxsep<-min(50000,mean(seps)+5*sd(seps),max(seps))
    n=40
  } else {
    minsep<- -200
    maxsep<-1000
    n=20
  }
  xseps<-subset(seps, seps < maxsep)
  xseps<-subset(xseps, xseps > minsep)
  hist(xseps, main=title, xlab='Separation', breaks=n, xlim=c(minsep,maxsep))
}

plotkind<-function(filebase,kind) {
  #require('png')
  allseps<-read.table(paste(filebase, 'sample_seps', kind, sep='.'), sep=' ')
  attach(allseps)
  for (lib in unique(V1)) {
    seps<-subset(V2,V1==lib)
    # don't bother plotting if we have very few samples
    if (length(seps) > 50) {
      filename<-paste(filebase, 'histogram', kind, lib, 'png', sep='.')
      print(paste("Generating",filename))
      png(filename, width=500, height=500)
      title<-paste(filebase, ' library ', lib, ' separations (', kind, ')', sep='')
      plotseps(lib, seps, kind, title)
      dev.off()
    }
  }
  detach(allseps)
}

plotkind("$1", 'in')
$outcmd
EOF
